name: YTMusic → OneDrive (gytmdl + rclone)

on:
  workflow_dispatch:
    inputs:
      urls:
        description: "每行一个 YTMusic 链接（Song/Album/Playlist/Artist）"
        required: true
      dest_dir:
        description: "上传到 od: 下的目标目录，例如 Music/CleoSol/"
        required: true
      itag:
        description: "音质 itag（141=AAC256，774=Opus256，140=AAC128）"
        required: false
        default: "141"

jobs:
  run:
    runs-on: macos-latest  # 可以根据需要改为 ubuntu-latest 或其它

    steps:
      # Checkout 代码
      - uses: actions/checkout@v4

      # 设置 Python 环境
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # 安装 gytmdl 和 ffmpeg
      - name: Install gytmdl & ffmpeg
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade gytmdl
          brew install ffmpeg  # Ubuntu 用 apt-get install -y ffmpeg

      # 从 base64 解码 cookies.txt
      - name: Write cookies.txt from base64
        env:
          YTM_COOKIES_B64: ${{ secrets.YTM_COOKIES_B64 }}
        run: |
          python - <<'PY'
import os, base64
b = os.environ.get('YTM_COOKIES_B64','').strip()
if not b:
    raise SystemExit("YTM_COOKIES_B64 is empty")
open('cookies.txt','wb').write(base64.b64decode(b))
PY
          wc -l cookies.txt || true  # 确保文件存在且有内容

      # 下载音乐
      - name: Download with gytmdl
        env:
          ITAG: ${{ github.event.inputs.itag }}
        run: |
          mkdir -p downloads
          gytmdl -r urls.txt -c cookies.txt -i "${ITAG:-141}" \
                 --save-cover -o downloads \
                 --template-folder "{album_artist}/{album}" \
                 --template-file "{track:02d} {title}"

      # 配置 rclone，上传文件到 OneDrive
      - name: Setup rclone (plain text config)
        uses: AnimMouse/setup-rclone@v1
        with:
          rclone_config: ${{ secrets.RCLONE_CONFIG }}
          disable_base64: true

      - name: Upload to OneDrive
        run: |
          SRC="downloads/"
          DST="od:${{ github.event.inputs.dest_dir }}"
          echo "SRC=$SRC"
          echo "DST=$DST"
          rclone copy "$SRC" "$DST" \
            --transfers=32 \
            --checkers=64 \
            --fast-list \
            --onedrive-chunk-size=60M \
            --buffer-size=1G \
            --multi-thread-streams=8 \
            --multi-thread-cutoff=16M \
            --progress \
            --stats=30s

      # 上传后检查
      - name: List remote target (post-check)
        run: rclone ls "od:${{ github.event.inputs.dest_dir }}" | head -n 50 || true
