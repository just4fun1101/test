name: Cyberdrop/Bunkr â†’ OneDrive (rclone)

on:
  workflow_dispatch:
    inputs:
      urls:
        description: "One or more URLs (space or newline separated) from cyberdrop.me or bunkrr.*"
        required: true
      dest_path:
        description: "Destination path on OneDrive remote (e.g. od:/incoming/album)"
        required: true
        default: "od:/incoming"
      extensions:
        description: "Comma-separated extensions to download (optional, e.g. mp4,jpg,png)"
        required: false
        default: ""
      retries:
        description: "Retries if connection fails"
        required: false
        default: "3"
      check_server:
        description: "Check server status before downloading (true/false)"
        required: false
        default: "false"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    concurrency:
      group: cyberbunkr-${{ github.ref }}
      cancel-in-progress: false
    env:
      OUT_DIR: ${{ github.workspace }}/downloads
      RCLONE_STATS: 1s

    steps:
      - name: Checkout (empty repo OK)
        uses: actions/checkout@v4

      - name: Fetch CyberdropBunkrDownloader
        run: |
          set -euxo pipefail
          git clone --depth=1 https://github.com/PaaaulZ/CyberdropBunkrDownloader downloader

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r downloader/requirements.txt


      - name: Prepare URL list
        env:
          URLS: ${{ inputs.urls }}
        run: |
          mkdir -p "$OUT_DIR"
          # Write URLs to a file (handles spaces/newlines)
          printf '%s\n' "$URLS" > urls.txt
          echo "Will download to: $OUT_DIR"
          echo "URLs:"
          cat urls.txt
      - name: Download from Cyberdrop/Bunkr
        run: |
          set -euxo pipefail
          ARGS="-f urls.txt -p \"$OUT_DIR\" -r ${{ inputs.retries }}"
          if [ -n "${{ inputs.extensions }}" ]; then
            ARGS="$ARGS -e \"${{ inputs.extensions }}\""
          fi
          if [ "${{ inputs.check_server }}" = "true" ]; then
            ARGS="$ARGS -css"
          fi
          eval python3 downloader/dump.py $ARGS

      - name: Setup rclone
        uses: AnimMouse/setup-rclone@v1
        with:
          rclone_config: ${{ secrets.RCLONE_CONFIG }}

      - name: Upload to OneDrive (remote: od)
        env:
          # If your rclone.conf is password-protected, add this secret too
          RCLONE_CONFIG_PASS: ${{ secrets.RCLONE_CONFIG_PASS }}
        run: |
          set -euxo pipefail
          SRC_DIR="$OUT_DIR/"
          DEST="${{ inputs.dest_path }}"
          echo "Uploading from $SRC_DIR to $DEST"
          rclone copy "$SRC_DIR" "$DEST" \
            --transfers=8 \
            --checkers=16 \
            --onedrive-chunk-size=32M \
            --fast-list \
            --stats=$RCLONE_STATS \
            --progress

      - name: List downloaded files
        if: always()
        run: |
          echo "Downloaded tree:"
          find "$OUT_DIR" -maxdepth 2 -type f | sed -n '1,200p'
