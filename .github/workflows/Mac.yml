name: 高速 Rclone 文件搬运（macOS 版）

on:
  workflow_dispatch:
    inputs:
      src_path:
        description: '源目录，相对于 new: Remote，比如：myFolder/ （注意带斜杠）'
        required: true
        default: ''
      dst_path:
        description: '目标目录，相对于 od: Remote，比如：backup/ （注意带斜杠）'
        required: true
        default: ''

jobs:
  transfer-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout 代码
        uses: actions/checkout@v3

      - name: 安装 Homebrew（若 runner 已自带可跳过）
        run: |
          # 如果 macOS runner 已包含 brew，可删除这步
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> $GITHUB_ENV
          eval "$(/opt/homebrew/bin/brew shellenv)"

      - name: 安装 rclone
        run: |
          brew install rclone

      - name: 写入 rclone 配置
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONFIG }}
        run: |
          mkdir -p ~/.config/rclone
          echo "$RCLONE_CONF" > ~/.config/rclone/rclone.conf
          # 如果你的 config 被加密，需要解密密码：
          # echo "${{ secrets.RCLONE_CONFIG_PASS }}" > ~/.config/rclone/rclone.conf.pass
          # export RCLONE_CONFIG_PASS="${{ secrets.RCLONE_CONFIG_PASS }}"

      - name: 高速拷贝 `${{ github.event.inputs.src_path }}` 到 `od:${{ github.event.inputs.dst_path }}`
        run: |
          SRC="new:${{ github.event.inputs.src_path }}"
          DST="od:${{ github.event.inputs.dst_path }}"
          echo "📁 源目录 = $SRC"
          echo "📁 目标目录 = $DST"
          rclone copy "$SRC" "$DST" \
            --ignore-existing \
            --transfers=24 \
            --checkers=32 \
            --fast-list \
            --buffer-size=1G \
            --multi-thread-streams=16 \
            --multi-thread-cutoff=64M \
            --drive-chunk-size=128M \
            --onedrive-chunk-size=160M \
            --timeout=20s \
            --low-level-retries=5 \
            --retries=10 \
            --retries-sleep=50s \
            --ignore-errors \
            --progress \
            --stats=30s
